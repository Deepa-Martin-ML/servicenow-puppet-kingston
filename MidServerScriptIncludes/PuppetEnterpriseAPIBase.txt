var PuppetEnterpriseAPIBase = Class.create();
PuppetEnterpriseAPIBase.prototype = {
	Properties: Packages.java.util.Properties,
	HTTPRequest: Packages.com.glide.communications.HTTPRequest,
	SecureShellHelper : Packages.com.snc.cmp.connector.cloud.ssh.provider.SecureShellHelper,
	Thread  : Packages.java.lang.Thread,

	/**
 	* Parameters and headers are expected to come from the bluprint or capi layer
 	*/
	initialize: function(parameters, headers) {
		//define Macros
		this.logger = new PuppetEnterpriseLogger();
		this.parameters = parameters;
		var ENDPOINT = "Endpoint";
		var USERNAME = "Identity";
		var PASSWORD = "Credentials";
		var CONFIG_MGMT_PROVIDER_INFO = "ConfigMgmtProviderInfo";
		this.DEFAULT_ERROR_STATUS_CODE = "500";
		this.PORT_CLOSED = "PORT-4433 CLOSED";
		this.URL_NOT_FOUND = "404";
		
		if ((this.parameters.containsKey(CONFIG_MGMT_PROVIDER_INFO)) && (!JSUtil.nil(this.parameters.get(CONFIG_MGMT_PROVIDER_INFO)))) {
			var configMgmtProvider = this.parameters.get(CONFIG_MGMT_PROVIDER_INFO);
			var configData = new JSON().decode(configMgmtProvider);
			this.enterpriseUrl = this.parameters.get(ENDPOINT);
			this.enterpriseUsername = configData.UserName;
			this.enterprisePassword = configData.Password;
			this.objectId = configData.ObjectId;
		}
	
		else {
			//add error message for endpoint not found
			throw new PuppetEnterpriseAPIException('Puppet Enterprise URL not found!!!!!', this.URL_NOT_FOUND);

		} 

	},

	
	/**
 	* This method returns reachable IP address from list of Addresses.
 	*/
	_getNodeAddress: function(){
		ms.log("### in get node address in puppet base api");
		var nodeAddressJson = this.parameters.get("NodeAddress");
		var nodeAddressJsonPayload = new JSON().decode(nodeAddressJson);
		var publicIp = nodeAddressJsonPayload.public_ip;
		var privateIp = nodeAddressJsonPayload.private_ip;
		var reachableIPAddress;
		if(!JSUtil.nil(publicIp))
			reachableIPAddress=publicIp;
		if(!JSUtil.nil(privateIp))
			reachableIPAddress=privateIp;

		return reachableIPAddress;
	},
	
	
	/**
 	* Returns NodeName , from the input parameters
 	*/
	_getNodeName: function(){
		ms.log("### in get node name in puppet base api");
		var additionalParams =  this.parameters.get("AdditionalParameters");
		ms.log("## additionalParams----->"+additionalParams);
		var additionalParamsJson = new JSON().decode(additionalParams);
		ms.log("## node_name in get nodeName--->"+additionalParamsJson.node_name);
		
		return additionalParamsJson.node_name;
	},
	
	
	/**
 	* To query Puppet Enterprise, token must be generated..
 	*/
	_getToken: function() {
		var payload = {};
		payload["login"] = this.enterpriseUsername;
		payload["password"] = this.enterprisePassword;

		try {
			var authUrl = this.enterpriseUrl + ":4433/rbac-api/v1/auth/token";
			this.logger.info("--> Authentication URL : "+authUrl);
			var request = new this.HTTPRequest(authUrl);
			request.addHeader("Content-Type", "application/json");

			var payloadJsonObj = new JSON().encodeObject(payload);
			this.logger.info("--> Request Body : "+payloadJsonObj);

			var response = request.post(payloadJsonObj);

			var status = response.getStatusCode();
			var responseBody = response.getBody();
			var jsonObj = new JSON().decode(responseBody);

			var token = jsonObj.token;
			this.logger.info("$$$ Token : "+token);
			return token;
		} catch (exception) {
			//duckking exception to main method
			throw new PuppetEnterpriseAPIException(exception.toString(), this.PORT_CLOSED);
		}
	},

	
	/**
 	* Get Additional Parameters from route headers and parse it and return in a dictionary form
 	*/
	_getAddtionalParameters: function(){
		//var mgmtAttrs =  this.parameters.get("AdditionalParameters");
		//var mgmtAttrsJson = new JSON().decode(mgmtAttrs);
		
		var additionalParams =  this.parameters.get("AdditionalParameters");
		var additionalParamsJson = new JSON().decode(additionalParams);
		var mgmtAttrsJson = additionalParamsJson.management_attributes;
		var additionalParameters = {};

		for(var outListIndex=0; outListIndex<mgmtAttrsJson.length; outListIndex++){
			var attrData = mgmtAttrsJson[outListIndex];
			var key="";
			var value="";
			for(var attr in attrData){
				if(attrData[attr].name == "management_attribute"){
					key = attrData[attr].value;
				}

				else if(attrData[attr].name == "management_attribute_value"){
					value = attrData[attr].value;
				}
			}
			additionalParameters[key] = value;
		}
		return additionalParameters;
	},
	
	
	/**
 	* Get ConfigOverrides from route headers and parse it and return in a dictionary form
 	*/
	_getConfigOverrides: function(){
		var configAttrs =  this.parameters.get("ConfigurationOverrides");
		var configAttrsJson = new JSON().decode(configAttrs);
		var additionalParameters = {};
		for(var outListIndex=0; outListIndex<configAttrsJson.length; outListIndex++){
			var attrData = configAttrsJson[outListIndex];
			var key="";
			var value="";
			for(var attr in attrData){
				if(attrData[attr].name == "attribute"){
					key = attrData[attr].value;
				}
				if(attrData[attr].name == "value"){
					value = attrData[attr].value;
				}
			}
			additionalParameters[key] = value;
		}
		return JSON.stringify(additionalParameters);
	},
	
	
	/**
 		* HTTP Responses are parssed.
 		*/
	_getResponse: function(response) {
		var status = response.getStatusCode();
		var responseBody = response.getBody();

		if (status < '200' || status >= '300') {
			throw new PuppetEnterpriseAPIException(responseBody, status);
		} else {
			var jsonObj = new JSON().decode(responseBody);
			return jsonObj;
		}

	},


	/**
 		* HTTP GET Request are made to PuppetEnterprise and return responses.
 		* This method takes api path as input parameter from calling method.
 		*/
	_httpGET: function(apiPath) {
		try {

			//get Login token
			this.token = this._getToken();

			var reqToken = "Token   " + this.token;

			//var getUrl = this.enterpriseUrl + apiPath;
			//this.logger.info("--> Puppet Enterprise Requested URL : "+apiPath);
			//var request = new this.HTTPRequest(this.enterpriseUrl+"/"+apiPath);
			var authUrl = this.enterpriseUrl + apiPath;
			this.logger.info("--> Puppet Enterprise Requested URL : "+authUrl);
			var request = new this.HTTPRequest(authUrl);
			request.addHeader("Content-Type", "application/json");
			request.addHeader("X-Authentication", this.token);

			var response = request.get();
			var status = response.getStatusCode();
			var responseBody = response.getBody();
			if (status == '200') {
				var jsonObj = new JSON().decode(responseBody);
				//this.logger.info("--> PUPPET ENTERPRISE RESPONSE : "+responseBody);
				return jsonObj;
			} else {
				throw new PuppetEnterpriseAPIException('Puppet Enterprise Credentials are Invalid !!!!!', status);
			}
		} catch (exception) {
			//duckking exception to main method
			//Handling server error 500.
			throw new PuppetEnterpriseAPIException(exception.toString(), this.DEFAULT_ERROR_STATUS_CODE);
		}
	},


	/**
 		* HTTP POST Request are made to PuppetEnterprise and returns responses.
 		* This method takes api path and payload as input parameter from calling method.
 		*/
	_httpPOST: function(apiPath, payload) {
		try {
			this.token = this._getToken();
			var authUrl = this.enterpriseUrl + apiPath;
			this.logger.info("--> Puppet Enterprise Requested URL : "+authUrl);
			var request = new this.HTTPRequest(authUrl);
			request.addHeader("Content-Type", "application/json");
			request.addHeader("X-Authentication", this.token);

			var response = request.post(payload);

			var status = response.getStatusCode();
			var responseBody = response.getBody();
			var jsonObj = new JSON().decode(responseBody);
			this.logger.info("--> PUPPET ENTERPRISE RESPONSE : "+responseBody);
			return jsonObj;
		} catch (exception) {
			//duckking exception to main method
			throw new PuppetEnterpriseAPIException(exception.toString(), this.DEFAULT_ERROR_STATUS_CODE);
		}
	},
    
	/**
 		* HTTP PUT Request are made to PuppetEnterprise and returns responses.
 		* This method takes api path and payload as input parameter from calling method.
 		*/
	_httpPUT: function(apiPath, payload) {
		try {
			this.token = this._getToken();
			var authUrl = this.enterpriseUrl + apiPath;
			this.logger.info("--> Puppet Enterprise Requested URL : "+authUrl);
			var request = new this.HTTPRequest(authUrl);
			request.addHeader("Content-Type", "application/json");
			request.addHeader("X-Authentication", this.token);

			var response = request.put(payload);

			var status = response.getStatusCode();
			var responseBody = response.getBody();
			var jsonObj = new JSON().decode(responseBody);
			this.logger.info("--> PUPPET ENTERPRISE RESPONSE : "+responseBody);
			return jsonObj;
		} catch (exception) {
			//duckking exception to main method
			throw new PuppetEnterpriseAPIException(exception.toString(), this.DEFAULT_ERROR_STATUS_CODE);
		}
	},

	/**
 		* HTTP DELETE Request are made to PuppetEnterprise and returns no response.
 		* This method takes api path as input parameter from calling method.
 		*/
	_httpDELETE: function(apiPath) {
		try {
			//get Login token
			this.token = this._getToken();

			var reqToken = "Token   " + this.token;

			var delUrl = this.enterpriseUrl + apiPath;
			var request = new this.HTTPRequest(delUrl);
			request.addHeader("Authorization", reqToken);

			var response = request.del();
			var status = response.getStatusCode();

			return status;
		} catch (exception) {
			//duckking exception to main method
			throw new PuppetEnterpriseAPIException(exception.toString(), this.DEFAULT_ERROR_STATUS_CODE);
		}
	},

	type: 'PuppetEnterpriseAPIBase'
};